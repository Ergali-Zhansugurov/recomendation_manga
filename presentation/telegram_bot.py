import logging
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackContext
from infrastructure.embedding import get_embedding

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ main.py)
global_index = None

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–æ—Ä –º–∞–Ω–≥–∏. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞–Ω–≥–∏."
    )

async def handle_text(update: Update, context: CallbackContext) -> None:
    query = update.message.text.strip()
    if not query:
        return
    query_embedding = get_embedding(query)
    results = global_index.search(query_embedding, k=5)
    if results:
        response_text = f'‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ *"{query}"*:\n\n'
        for manga, score in results:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            manga_id = manga.get("id", "N/A")
            title = manga.get("title", {}).get("english") or manga.get("title", {}).get("romaji", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            genres = ", ".join(manga.get("genres", []))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ (–≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ)
            tags_list = manga.get("tags", [])
            tags = ", ".join(tag.get("name", "N/A") for tag in tags_list)

            # –û–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–∑—ã–≤—ã
            description = manga.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
            reviews_count = manga.get("reviews", {}).get("pageInfo", {}).get("total", 0)

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            response_text += f"üìñ *{title}* (ID: {manga_id}) (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f})\n"
            response_text += f"–ñ–∞–Ω—Ä—ã: {genres}\n"
            response_text += f"–¢–µ–≥–∏: {tags}\n"
            response_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            response_text += f"–û—Ç–∑—ã–≤—ã: {reviews_count}\n\n"

        await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def run_bot(index):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    global global_index
    global_index = index

    from config import TELEGRAM_BOT_TOKEN
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                        level=logging.INFO)
    logger = logging.getLogger(__name__)
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–Ω–≥–∏.")

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT, handle_text))
    app.run_polling()